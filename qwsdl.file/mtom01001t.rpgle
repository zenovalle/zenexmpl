      * =====================================================================
      *  Generated by WSDL2RPG 1.16.5 / 08.03.2017
      *  Built on Ott 26, 2017 (15:24:42)
      *  Built for V7R1M0
      *  Based on WS_PGM 1.16.5 - 08.03.2017
      * =====================================================================
      *   Sample program to show how to call the
      *     ArchiveServerPort_archiveFile()
      *   Web service.
      *
      *   Search for 'CHANGED' to see the changes that have been
      *   applied by hand to this generated source member.
      * =====================================================================
      *   Pre-Compiler tags used by STRPREPRC to retrieve creation
      *   commands from the source member.
      * ---------------------------------------------------------------------
      * >>PRE-COMPILER<<
      *   >>CRTCMD<< CRTRPGMOD    MODULE(&LI/&OB) +
      *                           SRCFILE(&SL/&SF) +
      *                           SRCMBR(&SM);
      *   >>COMPILE<<
      *     >>PARM<< TRUNCNBR(*NO);
      *     >>PARM<< DBGVIEW(*LIST);
      *     >>PARM<< OPTION(*EVENTF);
      *   >>END-COMPILE<<
      *   >>EXECUTE<<
      *   >>CMD<<    CRTPGM       PGM(&LI/&OB) +
      *                           MODULE(*PGM) +
      *                           BNDSRVPGM(*LIBL/MTOM01 +
      *                                     *LIBL/WSDL2RPGRT    +
      *                                     ) +
      *                           DETAIL(*BASIC) +
      *                           ACTGRP(*NEW);
      * >>END-PRE-COMPILER<<
      * =====================================================================
     H DEBUG
     H OPTION(*SRCSTMT : *NODEBUGIO)
     H EXTBININT(*YES)
      *
     FQSYSPRT   O    F   80        PRINTER OFLIND(*in70)
      *
      *  Include generated web service stub module to
      *  define the prototype of the web service procedure
      *  and the required type definitions (aka reference fields).
      /DEFINE PROTOTYPE_MTOM01001
 CPY  /COPY ZENEXMPL/QWSDL,MTOM01001
      /UNDEFINE PROTOTYPE_MTOM01001
      *
      *  Program entry point
     D MTOM01001T...
     D                 PR
     D description                         like(                                CHANGED
     D                                     tns_archiveRequest_t.description)    CHANGED
     D fileLoad                            like(                                CHANGED
     D                                     tns_archiveRequest_t.fileLoad)       CHANGED
     D fileName                            like(                                CHANGED
     D                                     tns_archiveRequest_t.fileName)       CHANGED
     D fileType                            like(                                CHANGED
     D                                     tns_archiveRequest_t.fileType)       CHANGED
     D key                                 like(                                CHANGED
     D                                     tns_archiveRequest_t.key)            CHANGED
      *
      *  Prints a given message to QSYSPRT.
     D printMsg...
     D                 PR                  extproc('print')
     D  i_text                      128A   value  varying options(*nopass)
      *
      *  Sends a message to the command line.
     D sndMsg...
     D                 PR                  extproc('sndMsg')
     D  i_text                      128A   value  varying
      *
      * =====================================================================
      *  Program entry point
      * =====================================================================
     D MTOM01001T...
     D                 PI
     D description                         like(                                CHANGED
     D                                     tns_archiveRequest_t.description)    CHANGED
     D fileLoad                            like(                                CHANGED
     D                                     tns_archiveRequest_t.fileLoad)       CHANGED
     D fileName                            like(                                CHANGED
     D                                     tns_archiveRequest_t.fileName)       CHANGED
     D fileType                            like(                                CHANGED
     D                                     tns_archiveRequest_t.fileType)       CHANGED
     D key                                 like(                                CHANGED
     D                                     tns_archiveRequest_t.key)            CHANGED
      *
      *  Web service error message text
     D errText         S                   like(wsdl_errText_t ) inz
      *
      * Request SOAP headers and message
      * These fields needs to be filled with reasonable values
      * right before calling the web service.
     D parameters      DS                  likeds(tns_archiveFileRnmd_t)
     D                                     inz
      * Response SOAP headers and message
      * This structure contains the result values returned by
      * the web service.
     D archiveFileResponse...
     D                 DS                  likeds(tns_archiveFileResponseRnmd_t)
     D                                     inz
      *
      *  Text of messages sent to the command line
     D text            S            128A   varying inz
      *
      *  Dynamic array index fields
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /free

         // Enable/disable http api debug log
         // (Enable the http api debug log in case of problems with the web service)
         // ArchiveServerPort_Port_setHttpDebug(
         //    *ON: '/tmp/httpapi_debug.txt');   // Default path of http api

         // Specify a proxy server if your network requires it.
         // ArchiveServerPort_Port_setHttpProxy(
         //    'your.proxy.server': 8080);

         // Set the parameter values of the request message
         // of the web service.
         //    assign values here
         //parameters.request.fileLoad = 'base64';                      CHANGED
         //parameters.request.fileName = 'string';                      CHANGED
         //parameters.request.fileType = 'string';                      CHANGED
         //parameters.request.key = 'string';                           CHANGED
         //parameters.request.description = 'string';                   CHANGED

         parameters.request.description = description;                //CHANGED
         parameters.request.fileName = fileName;                      //CHANGED
         parameters.request.fileType = fileType;                      //CHANGED
         parameters.request.key = key;                                //CHANGED

         parameters.request.fileLoad = 'cid:'+                         //CHANGED
              ArchiveServerPort_archiveFile_Attachments_addFile(       //CHANGED
                 fileLoad: parameters.request.fileType);               //CHANGED

         // Enable preemptive authetication
         // 1. parameter: WSDL_AUTH_BASIC or WSDL_AUTH_MD5_DIGEST
         // 2. parameter: (optional) cTrue for proxy authentication
         //                          cFalse for server authentication (default)
         // ArchiveServerPort_Port_setPreemptiveAuthentication(
         //    WSDL_AUTH_BASIC);

         // Now let's call the web service.
         archiveFileResponse =
            ArchiveServerPort_archiveFile(
                parameters:
                errText);

         // If the Web service finished successfully ...
 B01     if (not ArchiveServerPort_Port_isError());
            // ... get response data from response data structure

            sndMsg('*** Success ***');
 X01     else;
            // ... else show error messages ordered by priority:
            // 1. HTTP error information
            text = %char(
                      ArchiveServerPort_HttpError_getCode()
                      ) + ': ' +
                   ArchiveServerPort_HttpError_getText()
                   ;
            sndMsg(text);
            // 2. SOAP error information
 B02        if (ArchiveServerPort_SoapError_getCode()
                  <> '');
               text = ArchiveServerPort_SoapError_getCode()
                      + ': ' +
                      ArchiveServerPort_SoapError_getText()
                      ;
               sndMsg(text);
 E02        endif;
            // 3. XML parser error information
 B02        if (ArchiveServerPort_XmlError_getCode()
                  <> 0);
               text = %char(ArchiveServerPort_XmlError_getCode())
                      + ': ' +
                      ArchiveServerPort_XmlError_getText()
                      ;
               sndMsg(text);
 E02        endif;
 E01     endif;

 B01     if (%open(QSYSPRT));
            close QSYSPRT;
 E01     endif;

         *inlr = *on;

      /end-free
      *
      * =====================================================================
      *  *** private ***
      *  Prints a given message to QSYSPRT.
      * =====================================================================
     P printMsg...
     P                 B
     D                 PI
     D  i_text                      128A   value  varying options(*nopass)
      *
      *  Local fields
     D lineOutput      DS            80    inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /free
 B01     if (not %open(QSYSPRT));
            open QSYSPRT;
 E01     endif;
 B01     if (%parms() >= 1);
            lineOutput = i_text;
 E01     endif;
         write QSYSPRT lineOutput;
      /end-free
     P                 E
      *
      * =====================================================================
      *  *** private ***
      *  Sends a message to the command line.
      * =====================================================================
     P sndMsg...
     P                 B
     D                 PI
     D  i_text                      128A   value  varying
      *
      *  Local fields
     D msgKey          S              4A   inz
      *
      *  Qualified message file name
     D qMsgF           DS                  qualified inz
     D  name                         10A
     D  lib                          10A
      *
      *  API error code
     D errCode         DS                  qualified inz
     D  bytPrv                       10I 0
     D  bytAvl                       10I 0
     D  excID                         7A
     D  reserved                      1A
     D  excDta                      256A
      *
      *  Send Program Message (QMHSNDPM) API
     D QMHSNDPM        PR                         extpgm('QMHSNDPM')
     D   i_msgID                      7A   const
     D   i_qMsgF                     20A   const
     D   i_msgData                32767A   const  options(*varsize )
     D   i_length                    10I 0 const
     D   i_msgType                   10A   const
     D   i_callStkE               32767A   const  options(*varsize )
     D   i_callStkC                  10I 0 const
     D   o_msgKey                     4A
     D   io_ErrCode               32767A          options(*varsize )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /free
         clear qMsgF;
         qMsgF.name = 'QCPFMSG';
         qMsgF.lib  = '*LIBL';
         clear errCode;
         errCode.bytPrv = %size(errCode);
         QMHSNDPM('CPF9897': qMsgF: i_text: %len(i_text): '*INFO'
                  : '*CTLBDY': 1: msgKey: errCode);
         return;
      /end-free
     P                 E
      *
